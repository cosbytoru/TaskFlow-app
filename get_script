#!/bin/bash

################################################################################
#
# シェル名称：UDMdm_Receive_Common.sh
# シェル和名：受信機能
# 処理概要  ：sFTP(get)方式でデータHUBに置かれたファイルを取得、および
#           取得したファイルの圧縮解凍および暗号化解除、バックアップを行う。
#
#   引数  :
#           $1 マスタ番号（3桁の数値）
#           $2 作成通番
#           $3 取込日付（YYYYMMDD形式, 省略可）
#           ※$3 引数なしの場合は、本日日付を自動で設定する。
#
#   戻り値:
#           0   (正常終了)
#           100 (警告終了)
#           200 (異常終了)
#
#   特記事項:
#           [改修履歴]
#           YYYY/MM/DD 担当者名 : ファイル識別子ごとにパスワードを動的に取得するよう改修
#
################################################################################

################################################################################
# 1. 初期処理
################################################################################

# 共通設定ファイルの存在確認
CONF_BASE_PATH=${CONF_BASE_PATH:-/opt/ap_UD/conf}

if [ ! -e "${CONF_BASE_PATH}/UDMdmCommon.conf" ]; then
    # 共通設定ファイルがなければ処理終了
    echo "バッチ共通設定ファイルが存在しません。"
    exit 200
fi

# バッチ共通処理読み込み
. "${CONF_BASE_PATH}/UDMdmCommon.conf"
# IFファイル識別子設定読み込み
. "${CONF_BASE_PATH}/UDMdmIFFileName.conf"

# 異常終了フラグ
ERRORFLAG=1

################################################################################
# 2.パラメータチェック
################################################################################

if [ $# = 2 ]
then
    CREATE_NO=$2
    INPUTDATE=`date +"%Y%m%d"`
elif [ $# = 3 ]
then
    CREATE_NO=$2
    INPUTDATE=$3
    if [ ${#INPUTDATE} -ne 8 ]; 
    then
        # パラメータ桁数不正
        echo "パラメータ桁数不正"
        exit ${MDM_EXIT_ERROR}
    fi
else
    # パラメータ数不正
    echo "パラメータ数不正（期待値 = 2 or 3）。"
    exit ${MDM_EXIT_ERROR}
fi

echo "受信機能 処理開始"

################################################################################
# 3.パラメータ設定
################################################################################

PARAM_EXTRACTION=$1
# 受信ディレクトリ
PARAM_NAME="MDM_AP_DATA_DIR_RECV_"${PARAM_EXTRACTION}
RECV_DIR=${!PARAM_NAME}
# バックアップディレクトリ
PARAM_NAME="MDM_AP_BACKUP_RECV_"${PARAM_EXTRACTION}
BACKUP_DIR=${!PARAM_NAME}
# 受信ファイル識別子
PARAM_NAME="MDM_AP_FILE_NAME_RECV_"${PARAM_EXTRACTION}
FILEIDENTS=${!PARAM_NAME}

################################################################################
# 4.受信処理
#   ※以降の処理はファイル識別子の定義情報の数分繰り返す
#   　途中で異常が発生した場合は処理を中断して異常終了とする（繰り返しの途中でも残りの処理は行わない）
################################################################################

# ファイル識別子の定義情報をカンマ区切り→半角スペース区切りに変更
FILEIDENTS=${FILEIDENTS//,/ }

# 区切り後の要素数分、繰り返し処理を行う
for FILEIDE in ${FILEIDENTS[@]} ; do

    ############################################################################
    # パスワードの動的取得
    #   ファイル識別子全体をキーとして、設定ファイルのマッピング定義を元に
    #   使用する送信システムIDを決定する。
    ############################################################################
 
    # ファイル識別子全体を元に、マッピング定義の変数名を動的に生成
    MAP_PARAM_NAME="MDM_AP_MAP_"${FILEIDE}
 
    # 間接参照で、キーに対応するシステムIDを取得
    # (設定ファイルにマッピング定義があれば、SENDER_IDに値が設定される)
    SENDER_ID=${!MAP_PARAM_NAME}
 
    # マッピング定義が存在しなかった場合のフォールバック処理
    if [ -z "${SENDER_ID}" ]; then
        # マッピング定義がなければ、従来通りファイル識別子の3文字目から4桁をシステムIDとして使用する
        SENDER_ID=${FILEIDE:2:4}
    fi

    # 決定した送信システムIDを元にパスワード変数を動的に生成
    PARAM_PASS_NAME="MDM_AP_PASSWORD_SENDER_"${SENDER_ID}

    # 間接参照でパスワードを取得
    CIPHER_KEYWORD=${!PARAM_PASS_NAME}

    # パスワードが設定ファイルに定義されているかチェック
    if [ -z "${CIPHER_KEYWORD}" ]; then
        echo "送信システムID ${SENDER_ID} に対応するパスワードが設定ファイルに定義されていません。(ファイル識別子: ${FILEIDE})"
        echo "受信機能 異常終了"
        exit ${MDM_EXIT_ERROR}
    fi

    ############################################################################
    # 4.1.ファイル名の生成： 
    #   (ファイル識別子) + YMDD
    #
    #   ・Y ： INPUTDATE のうち 4桁目 の値（YYYYの末尾1桁）
    #   ・M ： INPUTDATE のうち 5～6桁目 の値(MM) について、
    #            値を 10進数 → 16進数 に変換して設定
    #            （※1～9月は数字、10月→A、11月→B、12月→C）
    #   ・DD： INPUTDATE のうち 7～8桁目 の値(DD)
    ############################################################################
    # YMDD値の取得
    STR1=`echo ${INPUTDATE} | cut -c 4`
    STR2=`echo ${INPUTDATE} | cut -c 5-6`
    STR2=`printf '%X' $((10#$STR2))`
    STR3=`echo ${INPUTDATE} | cut -c 7-8`

    # 入力ファイル名
    INPUTFILE=${FILEIDE}${STR1}${STR2}${STR3}`printf '%02d' ${CREATE_NO}`
    # 入力ファイルパス
    INPUTFILE_PATH=${DATA_HUB_RECV}"/"${INPUTFILE}

    ############################################################################
    # 4.2.受信対象のファイルのハッシュ値取得
    ############################################################################
    # ハッシュ値の取得（SSH）
    INPUTFILE_HASH=`ssh ${DATA_HUB_USER}@${DATA_HUB_HOST} sha256sum ${INPUTFILE_PATH} | cut -d " " -f 1`
    if [ -z ${INPUTFILE_HASH} ]
    then
        # 取得できなかった場合は警告終了とする
        echo "ファイルが存在しません。受信ファイル名："${INPUTFILE}
        echo "受信機能 警告終了"
        exit ${MDM_EXIT_WARN}
    fi

    ############################################################################
    # 4.3.ファイル受信（sFTP）
    #   ※受信後のハッシュ値が一致しない場合は失敗とし、3回までリトライする
    ############################################################################
    RETRY_COUNT=3
    ERRORFLAG=1
    for RETRY_NUM in $(seq 1 $RETRY_COUNT)
    do
        # ファイル受信
sftp ${DATA_HUB_USER}@${DATA_HUB_HOST} << EOF
          lcd ${RECV_DIR}
          get ${INPUTFILE_PATH}
EOF

        # 受信したファイルのハッシュ値を取得
        RECVFILE_HASH=`sha256sum ${RECV_DIR}"/"${INPUTFILE} | cut -d " " -f 1`
        if [ $INPUTFILE_HASH = $RECVFILE_HASH ]; then
            # 受信前に取得したハッシュ値と一致する場合は繰り返し処理を終了する
            echo "sFTP受信処理が成功しました。受信ファイル名："${INPUTFILE}
            ERRORFLAG=0
            break
        fi

        # ハッシュ値が一致しない場合はリトライ回数が最大に到達するまで繰り返し処理を続行する
        echo "sFTP受信処理に失敗しました。受信ファイル名："${INPUTFILE}
        if [ $RETRY_NUM -ne $RETRY_COUNT ]; then
            sleep $RETRY_INTERVAL
        fi
    done

    # 受信に失敗した場合は異常終了する
    if [ $ERRORFLAG -eq 1 ]; then
        echo "sFTP受信リトライに3回失敗しました。"
        echo "受信機能 異常終了"
        exit ${MDM_EXIT_ERROR}
    fi

    ############################################################################
    # 4.4.受信ファイルの復号化・圧縮解凍
    ############################################################################
    # 作業ディレクトリ作成
    cd $RECV_DIR
    mkdir ./tmp

    # 復号化・圧縮解凍実行（7-zip）
    ${SEVEN_ZIP_CMD} e -tzip -mem=${CIPHER_TYPE} -p"${CIPHER_KEYWORD}" ${INPUTFILE} -otmp
    RC=$?
    echo "DEBUG: 7zコマンドの終了コード(RC)は [${RC}] です。"
    if [ ${RC} -ne 0 ]; then
        echo "ファイルの復号化・圧縮解凍に失敗しました。ファイル名：${INPUTFILE}"
        echo "受信機能 異常終了"
        exit ${MDM_EXIT_ERROR} # 異常終了
    fi

    ############################################################################
    # 4.5.受信ファイルのバックアップ
    ############################################################################
    # ファイルのバックアップ
    mv -f ./${INPUTFILE} ${BACKUP_DIR}
    if [ $? -ne 0 ]; then
        # ファイル移動に失敗した場合は異常終了とする
        echo "受信ファイルの移動に失敗しました。受信ファイル名："${INPUTFILE}
        echo "受信機能 異常終了"
        exit ${MDM_EXIT_ERROR}
    fi

    # 作業ディレクトリの削除
    mv -f ./tmp/${INPUTFILE} ./
    rmdir ./tmp

done

################################################################################
# 5. 終了処理
################################################################################

echo "受信機能 処理終了"

# 実行結果（返却値）
exit ${MDM_EXIT_NORMAL}

