#!/bin/bash

#================================================================
# CSVフィルタリングツール
#
# 説明:
#   指定された列の値が、指定された文字列のいずれかと一致する行を抽出します。
#   ヘッダー行とフッター行をスキップするオプションも備えています。
#
# 使用方法:
#   ./filter_csv.sh -c <列番号> -s <文字列> [options] [file1.csv ...]
#
# オプション:
#   -c <列番号> : フィルタリング対象のカラム番号。必須。
#   -s <文字列> : 抽出する文字列をカンマ区切りで指定 (例: "G111,G3333")。必須。
#   -H <行数>   : スキップするヘッダーの行数 (デフォルト: 0)。
#   -F <行数>   : スキップするフッターの行数 (デフォルト: 0)。
#   -h           : このヘルプメッセージを表示する。
#
# 使用例:
#   # 3列目が "A01" または "B02" の行を、ヘッダー1行とフッター2行を除いて抽出
#   ./filter_csv.sh -c 3 -s "A01,B02" -H 1 -F 2 data.csv
#
#================================================================

# --- デフォルト設定 ---
HEADER_LINES=0
FOOTER_LINES=0
COLUMN=""
MATCH_STRINGS=""

# --- ヘルプメッセージ表示関数 ---
usage() {
    echo "使用方法: $0 -c <列番号> -s <文字列> [options] [file1.csv ...]"
    echo "  -c <列番号> : フィルタリング対象のカラム番号。必須。"
    echo "  -s <文字列> : 抽出する文字列をカンマ区切りで指定 (例: \"G111,G3333\")。必須。"
    echo "  -H <行数>   : スキップするヘッダーの行数 (デフォルト: 0)。"
    echo "  -F <行数>   : スキップするフッターの行数 (デフォルト: 0)。"
    echo "  -h           : このヘルプメッセージを表示する。"
    exit 1
}

# --- オプション解析 ---
while getopts "c:s:H:F:h" opt; do
    case ${opt} in
        c)
            COLUMN=${OPTARG}
            ;;
        s)
            MATCH_STRINGS=${OPTARG}
            ;;
        H)
            HEADER_LINES=${OPTARG}
            ;;
        F)
            FOOTER_LINES=${OPTARG}
            ;;
        h)
            usage
            ;;
        \?)
            usage
            ;;
    esac
done
shift $((OPTIND - 1))

# --- 必須引数の検証 ---
if [ -z "${COLUMN}" ] || [ -z "${MATCH_STRINGS}" ]; then
    echo "エラー: -c と -s は必須オプションです。-hでヘルプを表示します。" >&2
    exit 1
fi

if [ $# -eq 0 ]; then
    echo "エラー: 処理対象のファイルが指定されていません。-hでヘルプを表示します。" >&2
    exit 1
fi

# --- メイン処理ループ ---
for file in "$@"; do
    if [ ! -f "$file" ]; then
        echo "警告: ファイルが見つかりません。スキップします: $file" >&2
        continue
    fi

    TOTAL_LINES=$(wc -l < "$file")
    
    # ヘッダーとフッターの合計が総行数以上でないかチェック
    if [ $((HEADER_LINES + FOOTER_LINES)) -ge ${TOTAL_LINES} ]; then
        # 全ての行がスキップ対象なので、何も出力せずに次のファイルへ
        continue
    fi

    START_LINE=$((HEADER_LINES + 1))
    END_LINE=$((TOTAL_LINES - FOOTER_LINES))
    
    # awkを使用してCSVをフィルタリング
    awk -v col="${COLUMN}" \
        -v patterns="${MATCH_STRINGS}" \
        -v start_line="${START_LINE}" \
        -v end_line="${END_LINE}" \
    '
    BEGIN {
        # FPATはフィールドのパターンを定義する。
        # 1. ダブルクォートで囲まれたフィールド: "[^"]*"
        # 2. クォートなしのフィールド (カンマ以外): [^,]+
        FPAT = "(\"[^\"]*\")|([^,]+)"
        
        # 抽出する文字列を連想配列に格納して高速参照
        split(patterns, pattern_array, ",")
        for (p in pattern_array) {
            match_targets[pattern_array[p]] = 1
        }
    }
    
    # 指定された範囲内の行のみを処理
    (NR >= start_line && NR <= end_line) {
        # 指定された列のフィールド値を取得
        field = $col
        
        # フィールドがダブルクォートで囲まれている場合、それを取り除く
        gsub(/^"|"$/, "", field)
        
        # フィールド値が抽出対象の文字列と一致するかチェック
        if (field in match_targets) {
            print $0
        }
    }
    ' "$file"
done
