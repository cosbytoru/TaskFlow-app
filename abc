'================================================================================
' 概要：指定したフォルダ内のTSV/XLSXファイルを、ファイル名に含まれるマスタ名ごとに
'       新しいシートへ結合し、両者の差分をレポートするマクロ (一括処理対応版)
'================================================================================

Option Explicit

'################################################################################
'#                                                                              #
'#     ★★★★   今後、実行するのはこのマクロだけです   ★★★★     #
'#                                                                              #
'################################################################################
Public Sub RunAllProcesses()

    Dim tsvFolderPath As String
    Dim xlsxFolderPath As String

    ' --- ステップ1: TSVフォルダの選択 ---
    With Application.FileDialog(4) ' msoFileDialogFolderPicker
        .Title = "【ステップ1/2】 TSVファイルが保存されているフォルダを選択してください"
        If .Show = False Then
            MsgBox "処理がキャンセルされました。", vbExclamation
            Exit Sub
        End If
        tsvFolderPath = .SelectedItems(1)
    End With

    ' --- ステップ2: XLSXフォルダの選択 ---
    With Application.FileDialog(4) ' msoFileDialogFolderPicker
        .Title = "【ステップ2/2】 XLSXファイルが保存されているフォルダを選択してください"
        If .Show = False Then
            MsgBox "処理がキャンセルされました。", vbExclamation
            Exit Sub
        End If
        xlsxFolderPath = .SelectedItems(1)
    End With
    
    On Error GoTo ErrorHandler_All
    Application.ScreenUpdating = False
    Application.DisplayAlerts = False

    ' --- ステップ3: 各処理を連続実行 ---
    Debug.Print "TSV結合処理を開始..."
    CombineTsvFilesByMaster tsvFolderPath
    
    Debug.Print "XLSX結合処理を開始..."
    CombineXlsxFilesByMaster xlsxFolderPath
    
    Debug.Print "差分レポート作成処理を開始..."
    CreateDiffReport

    Application.ScreenUpdating = True
    Application.DisplayAlerts = True
    MsgBox "全ての処理が完了しました。", vbInformation
    Exit Sub

ErrorHandler_All:
    Application.ScreenUpdating = True
    Application.DisplayAlerts = True
    MsgBox "一括処理中にエラーが発生しました。" & vbCrLf & vbCrLf & _
           "エラー番号: " & Err.Number & vbCrLf & _
           "エラー内容: " & Err.Description, vbCritical
End Sub


' ■■■ ヘルパー関数①: シート名を安全な文字列にする ■■■
Private Function SanitizeSheetName(ByVal name As String) As String
    Dim invalidChars As Variant
    invalidChars = Array("/", "\", "?", "*", "[", "]")
    Dim i As Long
    For i = 0 To UBound(invalidChars)
        name = Replace(name, invalidChars(i), "")
    Next i

    If Len(name) > 31 Then
        name = Left(name, 31)
    End If
    SanitizeSheetName = name
End Function

' ■■■ ヘルパー関数②: TSVのフィールドから不要な""を除去する ■■■
Private Function CleanTsvField(ByVal field As String) As String
    Dim temp As String
    temp = field

    If Len(temp) >= 2 And Left(temp, 1) = """" And Right(temp, 1) = """" Then
        temp = Mid(temp, 2, Len(temp) - 2)
        temp = Replace(temp, """""", """")
    End If
    CleanTsvField = temp
End Function


' ■■■ メイン処理① (TSVファイル結合) ■■■
Private Sub CombineTsvFilesByMaster(ByVal folderPath As String)

    Const HEADER_ROW_TEXT As String = "ファイル名,ヘッダは無し,,,"
    
    Dim fso As Object, fileGroups As Object, targetFolder As Object, file As Object, stream As Object
    Dim textLine As String, sheetName As String, filePath As String, sourceName As String
    Dim masterName As Variant
    Dim lineParts() As String, writeData() As String
    Dim ws As Worksheet
    Dim lineCounter As Long, i As Long, j As Long
    
    Set fso = CreateObject("Scripting.FileSystemObject")
    Set fileGroups = CreateObject("Scripting.Dictionary")
    Set targetFolder = fso.GetFolder(folderPath)
    
    For Each file In targetFolder.Files
        If LCase(file.name) Like "移行用シート_*.tsv" Then
            Dim baseName As String
            baseName = fso.GetBaseName(file.name)

            Dim firstUnderscorePos As Long, secondUnderscorePos As Long
            firstUnderscorePos = InStr(1, baseName, "_")
            If firstUnderscorePos > 0 Then
                secondUnderscorePos = InStr(firstUnderscorePos + 1, baseName, "_")
                If secondUnderscorePos > 0 Then
                    sourceName = Mid(baseName, secondUnderscorePos + 1)
                    masterName = Mid(baseName, firstUnderscorePos + 1, secondUnderscorePos - firstUnderscorePos - 1)

                    If Not fileGroups.Exists(masterName) Then
                        fileGroups.Add masterName, New Collection
                    End If
                    fileGroups(masterName).Add Array(file.Path, sourceName)
                End If
            End If
        End If
    Next file

    If fileGroups.Count = 0 Then
        MsgBox "対象となるTSVファイルが見つかりませんでした。", vbInformation
        GoTo CleanUp_Tsv
    End If
    
    For Each masterName In fileGroups.Keys
        sheetName = SanitizeSheetName(CStr(masterName))
    
        On Error Resume Next
        Set ws = Nothing
        Set ws = ThisWorkbook.Worksheets(sheetName)
        On Error GoTo 0 ' エラーハンドリングを一旦解除
    
        If ws Is Nothing Then
            Set ws = ThisWorkbook.Worksheets.Add(After:=ThisWorkbook.Worksheets(ThisWorkbook.Worksheets.Count))
            ws.name = sheetName
            ws.Cells.NumberFormat = "@"
        Else
            ws.Cells.ClearContents
            ws.Cells.NumberFormat = "@"
        End If

        Dim headers() As String
        headers = Split(HEADER_ROW_TEXT, ",")
        ws.Cells(1, 1).Resize(1, UBound(headers) + 1).Value = headers

        lineCounter = 2

        Dim fileList As Collection
        Set fileList = fileGroups(masterName)

        Set stream = CreateObject("ADODB.Stream")
        stream.Charset = "UTF-8"
    
        For i = 1 To fileList.Count
            Dim fileInfo As Variant
            fileInfo = fileList.Item(i)
            filePath = fileInfo(0)
            sourceName = fileInfo(1)

            stream.Open
            stream.LoadFromFile filePath

            Do While Not stream.EOS
                textLine = stream.ReadText(-2)

                If Trim(textLine) <> "" Then
                    lineParts = Split(textLine, vbTab)
                    ReDim writeData(0 To UBound(lineParts) + 1)
                    writeData(0) = sourceName
                    For j = 0 To UBound(lineParts)
                        writeData(j + 1) = CleanTsvField(lineParts(j))
                    Next j
                    ws.Cells(lineCounter, 1).Resize(1, UBound(writeData) + 1).Value = writeData
                    lineCounter = lineCounter + 1
                End If
            Loop

            stream.Close
        Next i

        ws.Columns.AutoFit
    Next masterName
    
CleanUp_Tsv:
    On Error Resume Next
    Set ws = Nothing
    Set fileList = Nothing
    Set file = Nothing
    Set targetFolder = Nothing
    Set fileGroups = Nothing
    Set fso = Nothing
    If Not stream Is Nothing Then
        If stream.State = 1 Then stream.Close
        Set stream = Nothing
    End If
End Sub

'================================================================================
' ■■■ メイン処理② (XLSXファイル結合) ■■■
'================================================================================
Private Sub CombineXlsxFilesByMaster(ByVal folderPath As String)

    Const HEADER_ROW As Long = 4
    Const DEFAULT_DATA_START_ROW As Long = 5
    Const DATA_START_COL As Long = 2

    Dim fso As Object, fileGroups As Object, targetFolder As Object, file As Object
    Dim sheetName As String, filePath As String, sourceName As String
    Dim masterName As Variant
    Dim ws As Worksheet, sourceWb As Workbook, sourceWs As Worksheet
    Dim lineCounter As Long, i As Long

    Set fso = CreateObject("Scripting.FileSystemObject")
    Set fileGroups = CreateObject("Scripting.Dictionary")
    Set targetFolder = fso.GetFolder(folderPath)
    
    For Each file In targetFolder.Files
        If LCase(file.name) Like "移行用シート_*.xlsx" Then
            Dim baseName As String
            baseName = fso.GetBaseName(file.name)

            Dim firstUnderscorePos As Long, secondUnderscorePos As Long
            firstUnderscorePos = InStr(1, baseName, "_")
            If firstUnderscorePos > 0 Then
                secondUnderscorePos = InStr(firstUnderscorePos + 1, baseName, "_")
                If secondUnderscorePos > 0 Then
                    sourceName = Mid(baseName, secondUnderscorePos + 1)
                    masterName = Mid(baseName, firstUnderscorePos + 1, secondUnderscorePos - firstUnderscorePos - 1)

                    If Not fileGroups.Exists(masterName) Then
                        fileGroups.Add masterName, New Collection
                    End If
                    fileGroups(masterName).Add Array(file.Path, sourceName)
                End If
            End If
        End If
    Next file

    If fileGroups.Count = 0 Then
        MsgBox "対象となるXLSXファイルが見つかりませんでした。", vbInformation
        GoTo CleanUp_Xlsx
    End If
    
    For Each masterName In fileGroups.Keys
        sheetName = SanitizeSheetName(CStr(masterName) & "_xlsx")
        
        Dim dataStartRow As Long
        Dim fixedColumnCount As Long
        
        Select Case masterName
            Case "事業体マスタ"
                dataStartRow = 10
                fixedColumnCount = 0
            Case Else
                dataStartRow = DEFAULT_DATA_START_ROW
                fixedColumnCount = 0
        End Select
    
        On Error Resume Next
        Set ws = Nothing
        Set ws = ThisWorkbook.Worksheets(sheetName)
        On Error GoTo 0 'エラーハンドリングを一旦解除
    
        If ws Is Nothing Then
            Set ws = ThisWorkbook.Worksheets.Add(After:=ThisWorkbook.Worksheets(ThisWorkbook.Worksheets.Count))
            ws.name = sheetName
            ws.Cells.NumberFormat = "@"
        Else
            ws.Cells.ClearContents
            ws.Cells.NumberFormat = "@"
        End If

        lineCounter = 2

        Dim fileList As Collection
        Set fileList = fileGroups(masterName)
        
        If fileList.Count > 0 Then
            Dim firstFileInfo As Variant
            firstFileInfo = fileList.Item(1)
            Set sourceWb = Workbooks.Open(firstFileInfo(0), ReadOnly:=True)
            Set sourceWs = sourceWb.Worksheets(1)
            
            Dim lastHeaderCol As Long
            lastHeaderCol = sourceWs.Cells(HEADER_ROW, sourceWs.Columns.Count).End(xlToLeft).Column
            
            If lastHeaderCol >= DATA_START_COL Then
                Dim headers As Variant
                headers = sourceWs.Range(sourceWs.Cells(HEADER_ROW, DATA_START_COL), sourceWs.Cells(HEADER_ROW, lastHeaderCol)).Value
                
                Dim finalHeaders() As Variant
                ReDim finalHeaders(1 To 1, 1 To UBound(headers, 2) + 1)
                finalHeaders(1, 1) = "ファイル名"
                
                Dim c As Long
                For c = 1 To UBound(headers, 2)
                    finalHeaders(1, c + 1) = headers(1, c)
                Next c
                
                ws.Cells(1, 1).Resize(1, UBound(finalHeaders, 2)).Value = finalHeaders
            Else
                ws.Cells(1, 1).Value = "ファイル名"
            End If
            
            sourceWb.Close SaveChanges:=False
            Set sourceWb = Nothing
            Set sourceWs = Nothing
        End If

        For i = 1 To fileList.Count
            Dim fileInfo As Variant
            fileInfo = fileList.Item(i)
            filePath = fileInfo(0)
            sourceName = fileInfo(1)

            Set sourceWb = Workbooks.Open(filePath, ReadOnly:=True)
            Set sourceWs = sourceWb.Worksheets(1)
            
            Dim lastRow As Long, lastCol As Long
            lastRow = sourceWs.Cells(sourceWs.Rows.Count, DATA_START_COL).End(xlUp).Row

            If lastRow >= dataStartRow Then
                If fixedColumnCount > 0 Then
                    lastCol = DATA_START_COL + fixedColumnCount - 1
                Else
                    Dim headerLastCol As Long, dataLastCol As Long
                    headerLastCol = sourceWs.Cells(HEADER_ROW, sourceWs.Columns.Count).End(xlToLeft).Column
                    dataLastCol = sourceWs.Cells(dataStartRow, sourceWs.Columns.Count).End(xlToLeft).Column
                    lastCol = Application.WorksheetFunction.Max(headerLastCol, dataLastCol)
                End If

                Dim dataRange As Range
                Set dataRange = sourceWs.Range(sourceWs.Cells(dataStartRow, DATA_START_COL), sourceWs.Cells(lastRow, lastCol))

                Dim dataArray As Variant
                dataArray = dataRange.Value

                If IsArray(dataArray) Then
                    Dim writeData() As Variant
                    Dim r As Long
                    For r = 1 To UBound(dataArray, 1)
                        ReDim writeData(1 To UBound(dataArray, 2) + 1)
                        writeData(1) = sourceName
                        For c = 1 To UBound(dataArray, 2)
                            writeData(c + 1) = dataArray(r, c)
                        Next c
                        ws.Cells(lineCounter, 1).Resize(1, UBound(writeData)).Value = writeData
                        lineCounter = lineCounter + 1
                    Next r
                Else
                    If Not IsEmpty(dataArray) Then
                        ws.Cells(lineCounter, 1).Value = sourceName
                        ws.Cells(lineCounter, 2).Value = dataArray
                        lineCounter = lineCounter + 1
                    End If
                End If
            End If

            sourceWb.Close SaveChanges:=False
        Next i

        ws.Columns.AutoFit
    Next masterName
    
CleanUp_Xlsx:
    On Error Resume Next
    Set ws = Nothing
    Set sourceWs = Nothing
    If Not sourceWb Is Nothing Then sourceWb.Close False
    Set sourceWb = Nothing
    Set fileList = Nothing
    Set file = Nothing
    Set targetFolder = Nothing
    Set fileGroups = Nothing
    Set fso = Nothing
End Sub


'================================================================================
' ■■■ メイン処理③ (差分レポート作成) ■■■
'================================================================================

Private Function GetCompositeKey(ByVal ws As Worksheet, ByVal rowNum As Long, ByVal keyCols As Variant) As String
    Dim key As String, i As Long
    key = ""
    On Error Resume Next
    For i = 0 To UBound(keyCols)
        key = key & Trim(ws.Cells(rowNum, keyCols(i)).Value) & Chr(0)
    Next i
    On Error GoTo 0
    GetCompositeKey = key
End Function

Private Sub CreateDiffReport()

    Const ADDED_COLOR As Long = 5296274
    Const DELETED_COLOR As Long = 12632256
    Const MODIFIED_ROW_COLOR As Long = 65535
    Const MODIFIED_CELL_COLOR As Long = 49407
    Const DIFF_CELL_FONT_COLOR As Long = vbRed
    
    Dim tsvWs As Worksheet, xlsxWs As Worksheet, diffWs As Worksheet
    Dim tsvDict As Object
    Dim tsvSheetName As String, masterName As String, xlsxKey As String, diffSheetName As String
    Dim keyCols As Variant, key As Variant
    Dim lastRowTsv As Long, lastRowXlsx As Long, lastColTsv As Long, lastColXlsx As Long, maxCol As Long
    Dim r As Long, c As Long, tsvRowNum As Long, diffRow As Long
    Dim isModified As Boolean, keyIsDefined As Boolean
    Dim processedCount As Long
    
    processedCount = 0
    
    For Each xlsxWs In ThisWorkbook.Worksheets
        If xlsxWs.name Like "*_xlsx" Then
            tsvSheetName = Replace(xlsxWs.name, "_xlsx", "")
            masterName = tsvSheetName
            
            Set tsvWs = Nothing
            On Error Resume Next
            Set tsvWs = ThisWorkbook.Worksheets(tsvSheetName)
            On Error GoTo 0 ' エラーハンドリングを一旦解除
            
            If Not tsvWs Is Nothing Then
                keyIsDefined = True
                Select Case masterName
                    Case "事業体マスタ":   keyCols = Array(1, 4)
                    Case "スキームマスタ": keyCols = Array(1, 3, 7)
                    Case "フロアマスタ":   keyCols = Array(1, 3, 7, 9)
                    Case "区画マスタ":     keyCols = Array(1, 3, 7, 9, 11)
                    Case Else:           keyIsDefined = False
                End Select
                
                If keyIsDefined Then
                    processedCount = processedCount + 1
                    
                    diffSheetName = tsvSheetName & "_diff"
                    
                    On Error Resume Next
                    ThisWorkbook.Worksheets(diffSheetName).Delete
                    On Error GoTo 0 ' エラーハンドリングを一旦解除
                    
                    Set diffWs = ThisWorkbook.Worksheets.Add(After:=xlsxWs)
                    diffWs.name = diffSheetName
                    diffWs.Cells.NumberFormat = "@"
                    
                    lastColXlsx = xlsxWs.Cells(1, xlsxWs.Columns.Count).End(xlToLeft).Column
                    diffWs.Cells(1, 1).Value = "状態"
                    diffWs.Cells(1, 2).Resize(1, lastColXlsx).Value = xlsxWs.Range("A1").Resize(1, lastColXlsx).Value
                    diffWs.Rows(1).Font.Bold = True

                    diffRow = 2
                    
                    Set tsvDict = CreateObject("Scripting.Dictionary")
                    lastRowTsv = tsvWs.Cells(tsvWs.Rows.Count, 1).End(xlUp).Row
                    If lastRowTsv >= 2 Then
                        For r = 2 To lastRowTsv
                            key = GetCompositeKey(tsvWs, r, keyCols)
                            If Not tsvDict.Exists(key) Then tsvDict.Add key, r
                        Next r
                    End If
                    
                    lastRowXlsx = xlsxWs.Cells(xlsxWs.Rows.Count, 1).End(xlUp).Row
                    If lastRowXlsx >= 2 Then
                        For r = 2 To lastRowXlsx
                            xlsxKey = GetCompositeKey(xlsxWs, r, keyCols)
                            
                            If tsvDict.Exists(xlsxKey) Then
                                tsvRowNum = tsvDict(xlsxKey)
                                isModified = False
                                
                                lastColTsv = tsvWs.Cells(tsvRowNum, tsvWs.Columns.Count).End(xlToLeft).Column
                                lastColXlsx = xlsxWs.Cells(r, xlsxWs.Columns.Count).End(xlToLeft).Column
                                maxCol = Application.WorksheetFunction.Max(lastColTsv, lastColXlsx)
                                
                                diffWs.Cells(diffRow, 2).Resize(1, maxCol).Value = xlsxWs.Cells(r, 1).Resize(1, maxCol).Value
                                
                                For c = 1 To maxCol
                                    Dim beforeVal As String, afterVal As String
                                    beforeVal = CStr(tsvWs.Cells(tsvRowNum, c).Value)
                                    afterVal = CStr(xlsxWs.Cells(r, c).Value)

                                    If beforeVal <> afterVal Then
                                        isModified = True
                                        With diffWs.Cells(diffRow, c + 1)
                                            .Interior.Color = MODIFIED_CELL_COLOR
                                            .Value = beforeVal & " -> " & afterVal
                                            .Font.Color = vbBlack
                                            .Font.Bold = False

                                            Dim arrowPos As Long
                                            arrowPos = InStr(1, .Value, " -> ")

                                            If arrowPos > 0 Then
                                                With .Characters(Start:=arrowPos + 4, Length:=Len(afterVal)).Font
                                                    .Color = DIFF_CELL_FONT_COLOR
                                                    .Bold = True
                                                End With
                                            End If
                                        End With
                                    End If
                                Next c
                                
                                If isModified Then
                                    diffWs.Cells(diffRow, 1).Value = "変更"
                                    diffWs.Cells(diffRow, 1).Interior.Color = MODIFIED_ROW_COLOR
                                Else
                                    diffWs.Cells(diffRow, 1).Value = "変更なし"
                                End If
                                
                                tsvDict.Remove xlsxKey
                                diffRow = diffRow + 1
                            Else
                                lastColXlsx = xlsxWs.Cells(r, xlsxWs.Columns.Count).End(xlToLeft).Column
                                diffWs.Cells(diffRow, 2).Resize(1, lastColXlsx).Value = xlsxWs.Cells(r, 1).Resize(1, lastColXlsx).Value
                                diffWs.Cells(diffRow, 1).Value = "追加"
                                diffWs.Rows(diffRow).Interior.Color = ADDED_COLOR
                                diffRow = diffRow + 1
                            End If
                        Next r
                    End If
                    
                    If tsvDict.Count > 0 Then
                        For Each key In tsvDict.Keys
                            tsvRowNum = tsvDict(key)
                            lastColTsv = tsvWs.Cells(tsvRowNum, tsvWs.Columns.Count).End(xlToLeft).Column
                            diffWs.Cells(diffRow, 2).Resize(1, lastColTsv).Value = tsvWs.Cells(tsvRowNum, 1).Resize(1, lastColTsv).Value
                            diffWs.Cells(diffRow, 1).Value = "削除"
                            diffWs.Rows(diffRow).Interior.Color = DELETED_COLOR
                            diffRow = diffRow + 1
                        Next key
                    End If
                    
                    diffWs.Columns.AutoFit
                End If
            End If
        End If
    Next xlsxWs
    
    If processedCount = 0 Then
        MsgBox "比較対象となるシートの組み合わせが見つかりませんでした。" & vbCrLf & _
               "（例: 「Mst_A」と「Mst_A_xlsx」のペアが必要です）", vbExclamation
    End If
    
End Sub
